# Используйте предложение else сразу после блока try-except. 
# Предложение else будет получено, только если не сгенерировано исключение. 
# Оператор else всегда должен предшествовать блокам except.

# В блоки else вы можете добавить код, который хотите запустить, если ошибок не было.

# бесконечный цикл while. 
# Код запрашивает ввод данных пользователем, 
# а затем анализирует его, используя встроенную функцию int(). 
# Если пользователь вводит значение ноль, 
# тогда блоком исключений будет достигнут успех. 
# В противном случае код будет проходить через блок else.

while True:
    x = int(input())

    try:
        result = 1 / x
    except:
        print("Error case")
        exit(0)
    else:
        print("Pass case")
        exit(1)
    
    # Используйте Finally
    # Если у вас есть код, который вы хотите запустить во всех ситуациях, напишите его в блоке finally. Python всегда будет выполнять инструкции, добавленные в блоке finally. Это наиболее распространенный способ выполнения задач по очистке. Вы также можете убедиться, что очистка прошла.

    # Ошибка поймана в блоке try. После того, как код в блоке except будет выполнен, инструкции в блоке finally будут выполнены.

    # блок finally будет ВСЕГДА работать, даже если вы вернулись раньше него.
    
    finally:
        print("The [finally clause] is hit")


# Как пропустить ошибки и продолжить выполнение
# try:
#     assert False
# except AssertionError:
#     pass
