# 18.hashlib.py
# Если нужно защитить хэши или алгоритм дайджеста сообщений, то для этого подойдет модуль стандартной библиотеки Python hashlib. 
# Он включает в себя безопасные алгоритмы хеширования FIPS, такие как SHA1, SHA224, SHA256, SHA384, а также SHA512 и MD5. Python также поддерживает функции хеширования adler32 и crc32, но они содержатся в модуле zlib. 
# Одно из самых популярных применений хеширования это хранение хеша пароля, вместо самого пароля. Конечно, хеш должен быть хорошим, в противном случае он может быть расшифрован.
# Другой популярный случай, в котором применяется шифрование – это хеширование файла, с последующей отправкой файла и его хеша по отдельности. 
# Получатель файла может запустить хеш в файле, чтобы убедиться в том, что файл соответствует отправленному хешу. Если это так, значит никто не менял файл, когда он был отправлен. 

# Существует множество различных типов хэшей, каждый из которых вычисляется с различной скоростью и уровнем безопасности. 
# Наиболее часто применяемой функцией является функция md5(), которая шифрует строку с помощью алгоритма MD5.  Она используется для шифрования паролей так как не существует алгоритма для дешифровки. Для сравнения введенного пользователем пароля с сохраненным в базе необходимо зашифровать введенный пароль, а затем произвести сравнение.

# Создадим хеш md5. 
# Добавляем модуль hashlib, чтобы получить доступ к функциям хеширования:
import os,hashlib

# Создаем новый экземпляр класса hashlib.md5():
hash = hashlib.md5()

print('экземпляр класса hashlib.md5', hash)
