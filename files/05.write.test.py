# 05.write.test.py

# Метод write() записывает любую строку в открытый файл. 
# Важно помнить, что строки в Python могут содержать двоичные данные, 
# а не только текст.
# Метод write() не добавляет символ переноса строки ('\n') в конец файла.
# fileObject.write(string)
# Здесь переданный параметр - это содержимое, которое будет записано в открытый файл.

# Open a file
fo = open("foo.txt", "w")
fo.write( "Python is a great language.\nYeah its great!!\n")

# Close opend file
fo.close()

# Если вы хотите не перезаписать файл полностью (что делает метод write в случае открытия файла в режиме 'w'), а только добавить какой-либо текст, то файл следует открывать в режиме 'a' - appending. После чего использовать все тот же метод write.

# Удалит существующую информацию в some.txt и запишет "Hello".
my_file = open("some.txt", 'w')
my_file.write("Hello")
my_file.close()

# Оставит существующую информацию в some.txt и добавит "Hello".
my_file = open("some.txt", 'a')
my_file.write("Hello")
my_file.close()

# Запишем некоторую информацию в файл "hello.txt":

with open("hello.txt", "w") as file:
   file.write("hello world")

# Теперь пишем в этот файл еще одну строку:

with open("hello.txt", "a") as file:
   file.write("\ngood bye, world")

# Дозапись выглядит как добавление строку к последнему символу в файле, поэтому, если необходимо сделать запись с новой строки, то можно использовать эскейп-последовательность "\n". 

# file.writelines (последовательность)
# Записывает последовательность строк в файл. 
# Последовательность может быть любым итерируемым объектом, 
# создающим строки, обычно списком строк.

with open("hello.txt", "a") as file:
   file.writelines(["Записывает последовательность строк в файл.", 
   "Последовательность может быть любым итерируемым объектом,", 
   "создающим строки, обычно списком строк."])
