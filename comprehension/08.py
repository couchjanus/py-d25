# Подсчет вхождений с использованием включений

# Когда мы хотим подсчитать количество элементов в итерации, 
# которые удовлетворяют некоторому условию, 
# мы можем использовать включение для создания идиоматического синтаксиса:

# Посчитать числа в `range(1000)` которые чётные или содержат цифру `9`:

print(sum(
    1 for x in range(1000)
    if x % 2 == 0 and
    '9' in str(x)
))

# Основная концепция такова:
# Перебирать элементы в диапазоне (1000).
# Объедините все необходимые if условия.
# Используйте 1 в качестве выражения, чтобы вернуть 1 для каждого элемента, 
# который соответствует условиям.
# Суммируйте все 1, чтобы определить количество предметов, которые соответствуют условиям.
# здесь мы не собираем 1 в списке (обратите внимание на отсутствие квадратных скобок), 
# но мы передаём их непосредственно функции суммирования, которая их суммирует. 
# Это генератор выражений, который похож на включения.

# Когда мы хотим подсчитать количество элементов в итерируемом элементе, 
# которые удовлетворяют некоторому условию, 
# мы можем использовать списковое включение для создания идиоматического синтаксиса:

# Подсчет числе в списке от 1 до 1000 (`range(1000)`), которые четные и содержат цифру 9 `9`:
print (sum(
    1 for x in range(1000) 
    if x % 2 == 0 and
    '9' in str(x)
))

# Основная концепция может быть обобщена как:
# Итерации над элементами в range(1000) .
# Сцепить все необходимое , при выполнении условия if .
# Используйте 1 в качестве выражения для возврата 1 для каждого элемента, который соответствует условиям.
# Суммируем все 1 , чтобы определить количество элементов , которые удовлетворяют условиям.
# Здесь мы не собираем все 1 в одном списке (обратите внимание на отсутствие квадратных скобок), 
# но мы считаем их  непосредственно через функцию sum. 
# Это называется выражение генератора, который похож на списковое включение.
