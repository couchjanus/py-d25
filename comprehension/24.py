# Функция reduce() должна принимать два аргумента (x и y). Функция вызывается для первых двух элементов из списка, затем для результата предыдущих вычислений и третьего и т.д. пока не будут обработаны все элементы списка. Это означает, что функция будет вызвана n-1 раз если список содержит n элементов. Возвращенное значение последнего вызова есть результат операции reduce(). 
# Простое суммирование.
from functools import reduce

foo = [2, 18, 9, 22, 17, 24, 8, 12, 27]
print(reduce(lambda x, y: x + y, foo)) # 139
print(reduce(lambda acc, x: f'{acc} | {x}', ['cat', 'dog', 'cow'])) #'cat | dog | cow'

import functools

pairs = [(1, 'a'), (2, 'b'), (3, 'c')]

# Чтобы применить reduce() к списку пар и вычислить сумму первого элемента каждой пары:

functools.reduce(lambda acc, pair: acc + pair[0], pairs, 0) # 6

# Идиоматический подход, используя выражение генератора в качестве аргумента для sum():
pairs = [(1, 'a'), (2, 'b'), (3, 'c')]

sum(x[0] for x in pairs) # 6

