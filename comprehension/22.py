# Встроенная функция filter() - функциональная конструкция, может быть преобразована в представление списка. Она принимает предикат в качестве первого аргумента и итеративный список в качестве второго аргумента. Она создает итератор, содержащий все элементы начальной коллекции, удовлетворяющие функции предиката. 
# функция filter() фильтрует все четные числа в данном списке целых чисел:
even = lambda x: x%2 == 0
list(filter(even, range(11))) # [0, 2, 4, 6, 8, 10]
# filter() возвращает итератор, поэтому необходимо вызывать list, который создает список с заданным итератором.
# Реализация, использующая конструкцию генератора списка, дает следующее:
[x for x in range(11) if x%2 == 0] # [0, 2, 4, 6, 8, 10]

# Один из путей вычислений простых чисел - алгоритм решето Эратосфена:
nums = range(2, 50)
# Инициализируем список nums числами от 2 до 49. Цикл for проходит по всем возможным делителям, т.е. значение i проходит от 2 до 7. Все числа что кратны этим делителям не могут быть простыми числами, мы используем функцию filter() для удаления их из списка.

for i in range(2, 8):
   nums = filter(lambda x: x == i or x % i, nums)
print(list(nums)) # [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]
# Функция filter() указывает: оставить элемент в списке если он равен i или если остается ненулевой остаток при делении на i. Иначе удалить его из списка. После того как фильтрующий цикл закончиться останутся только простые числа.

foo = [2, 18, 9, 22, 17, 24, 8, 12, 27]

# filter() вызывает lambda функцию для каждого элемента списка и возвращает новый список, который содержит только те элементы для которых функция возвращает “true”. В этом случае, мы получаем список всех элементов кратных 3. Выражение x % 3 == 0 вычисляет остаток от деления x на 3 и сравнивает результат с 0 (true если х делиться ровно на 3).

print(list(filter(lambda x: x % 3 == 0, foo))) # [18, 9, 24, 12, 27]

print(list(filter(lambda x: 'o' in x, ['cat', 'dog', 'cow']))) # ['dog', 'cow']
