# Выражения-генераторы
# У списковых включений есть одна возможная проблема, 
# они создают список сразу в памяти. 
# Это может стать большой проблемой, если вы имеете дело с большими наборами данных. 
# Но даже если это не так, лишние расходы вам не нужны. 
# В случае если вы собираетесь запустить цикл по результатам, то нет смысла создавать список. 
# Поэтому, если вы можете отказаться от возможности индексировать результат 
# и выполнять другие операции с списками, 
# вы можете использовать выражение генератора, 
# которое использует очень похожий синтаксис, но создает “ленивый” объект, 
# который ничего не вычисляет, до того момента пока вы не запросите значение.

# Генераторное выражение очень похоже на списки. 
# Основное отличие состоит в том, что оно не создаёт полный набор результатов сразу; 
# он создаёт объект генератора, который затем может быть повторён.

# Например, посмотрите различия в коде:
# списковое включение
[x**2 for x in range(10)]
# Out: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
# В Python 3, range просто возвращает генератор. 

# Генераторные выражения вычисляются лениво, что означает, 
# что они генерируют и возвращают каждое значение только тогда, когда генератор повторяется. 
# Это может пригодиться при переборе больших наборов данных, 
# без создания дубликатов набора данных в памяти:

for square in (x**2 for x in range(1000000)):
    #сделает что-нибудь
    print(square)
