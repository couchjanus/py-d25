# Генерирование списка, в котором будут отмечены английские и неанглийские буквы

# нам дают строку, в которой могут присутствовать буквы любых алфавитов. 
# мы захотели составить новый список, 
# где напротив каждой буквы будет отмечено, является ли она английской или нет.

# Из модуля string импортирован объект ascii_letters, 
# в котором содержатся только буквы английского алфавита:

# ascii_letters = {str} #'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'

from string import ascii_letters
letters = 'hыtφтrцзqπ'  # набор букв из разных алфавитов

# Разграничиваем буквы на английские и не английские
is_eng = [f'{letter}-ДА' if letter in ascii_letters else f'{letter}-НЕТ' for letter in letters]
print(is_eng)
# ['h-ДА', 'ы-НЕТ', 't-ДА', 'φ-НЕТ', 'т-НЕТ', 'r-ДА', 'ц-НЕТ', 'з-НЕТ', 'q-ДА', 'π-НЕТ']

# Вы можете поместить условие в конец оператора для простой фильтрации, 
# но что, если вы хотите изменить значение элемента вместо его фильтрации? 
# В этом случае полезно поместить условное выражение в начале выражения:

# new_list = [expression (if conditional) for member in iterable]
# С помощью этого шаблона вы можете использовать условную логику 
# для выбора из нескольких возможных вариантов вывода. 
# Например, если у вас есть список цен, 
# вы можете заменить отрицательные цены на 0 и оставить положительные значения без изменений:

original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]
prices = [i if i > 0 else 0 for i in original_prices]
print(prices)
# [1.25, 0, 10.22, 3.78, 0, 1.16]
# Здесь выражение i содержит условный оператор, if i> 0 else 0. 
# Это говорит Python выводить значение i, если число положительное, 
# но менять i на 0, если число отрицательное. 
# Если это окажется недостаточно, то может быть полезно рассматривать условную логику 
# как свою отдельную функцию:

def get_price(price):
    return price if price > 0 else 0
prices = [get_price(i) for i in original_prices]
print(prices)
# [1.25, 0, 10.22, 3.78, 0, 1.16]

# Теперь наш условный оператор содержится в get_price(), 
# и вы можете использовать его как часть выражения вашего списка.

# else можно использовать в списковых включениях, 
# но нужно следить за синтаксисом. 
# Условие if или else следует использовать перед циклом for, а не после:

# создать список символов из apple, replacing согласные на '*'
# Ex - 'apple' --> ['a', '*', '*', '*' ,'e']
# [x for x in 'apple' if x in 'aeiou' else '*']
# Out: SyntaxError: invalid syntax

# При использовании if / else используйте их перед циклом
lapl= [x if x in 'aeiou' else '*' for x in 'apple']
# Out:['a', '*', '*', '*', 'e']
print(lapl)
# здесь используется другая языковая конструкция, 
# условное выражение, которое само по себе не является частью синтаксиса включения. 
# Учитывая, что if после  for…in является частью спискового включения 
# и используется для фильтрации элементов из исходного кода.
