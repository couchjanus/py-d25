# Прежде чем перейти к написанию тестов, вы должны понять следующее:

#     Что вы хотите проверить?
#     Вы пишете unit test или integration test?

# После убедитесь, что структура теста соответствует следующему порядку:

#     Создание структуры ввода.
#     Выполнение кода и определение вывода.
#     Сравнивание полученного с ожидаемым результатом.

# Для этого приложения вы должны проверить sum(). Есть много вариантов поведения функции, которые нужно учитывать:

#     Может ли функция суммировать целые числа?
#     Может ли она использовать set или tuple?
#     Что происходит, когда вы вводите неверное значение, например, переменную или целую строчку?
#     Что происходит, когда значение отрицательно?

# Начнем с суммы целых чисел.

import unittest

from src.foo.bar import plus

class TestPlusFuncrion(unittest.TestCase):
    def test_list_int(self):
        """
        Test that it can sum a list of integers
        """
        data = [11, 2, 3]
        result = plus(data)
        self.assertEqual(result, 16)

if __name__ == '__main__':
    unittest.main()

# Код импортирует plus() из папки foo, 
# затем определяет новый класс теста TestSum, наследуемый от unittest, 
# а TestCase определяет тестовый метод .test_list_int() для проверки списка целых чисел.

# Метод .test_list_int() будет:

#     Описывать переменные списка чисел.
#     Назначать результат foo.bar.plus(data) для результирующей переменной.
#     Проверять, что значение равно шести, используя метод .assertEqual() в классе unittestTestCase.
#     Определять точку ввода в командную строку, где выполняется unittest test–runner .main().

# Как писать утверждения и проверки assertions

# Последним этапом теста является проверка вывода на основе известного ответа. Это называется утверждением − assertion. Есть несколько общих принципов их написания:

#     Удостоверьтесь, что тесты могут повторяться.
#     Попробуйте проверять результаты, которые относятся к входным данным, например, проверка результата суммы значений в sum().

# Unittest поставляется со множеством методов для проверки значений и переменных. Вот некоторые из наиболее используемых:

# Проверка Test Runners

# if __name__ == '__main__':
#     unittest.main()

# Это точка входа в командную строку. Она означает, что если вы выполните скрипт самостоятельно, запустив python.test.py в командной строке, он вызовет unittest.main(), после чего запустятся все классы, которые наследуются от unittest.TestCase в этом файле.

# $ python -m unittest test
# python -m unittest test
# .
# ----------------------------------------------------------------------
# Ran 1 test in 0.000s

# OK

# Вы можете предоставить дополнительные опции для изменения вывода. Один из них – “–v”:

# $ python -m unittest -v test
# test_list_int (test.TestSum)
# Test that it can sum a list of integers ... ok

# ----------------------------------------------------------------------
# Ran 1 test in 0.000s

# OK

# python -m nose2
# .
# ----------------------------------------------------------------------
# Ran 1 test in 0.000s

# OK
