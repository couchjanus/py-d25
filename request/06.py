import requests

# В тех случаях, когда вы хотите получить доступ к “сырому” ответу сервера на уровне сокета,
# обратитесь к res.raw.
# Если вы хотите сделать это, убедитесь, что вы указали stream=True в вашем первом запросе.
# После этого вы уже можете проделать следующее:
#
res = requests.get('https://api.github.com/events', stream=True)
res.raw
# <urllib3.response.HTTPResponse object at 0x101194810>
res.raw.read(10)
# '\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x03'
#
# Однако, можно использовать подобный код как шаблон, чтобы сохранить результат в файл:
#
with open(filename, 'wb') as fd:
    for chunk in res.iter_content(chunk_size=128):
        fd.write(chunk)
#
# Использование res.iter_content обработает многое из того,
# с чем бы вам пришлось иметь дело при использовании res.raw напрямую.
# Для извлечения содержимого при потоковой загрузке,
# используйте способ, описанный выше.
# Обратите внимание, что chunk_size можно свободно скорректировать до числа,
# которое лучше подходит в вашем случае.
#
# Response.iter_content будет автоматически декодировать gzip и deflate.
# Response.raw — необработанный поток байтов, он не меняет содержимое ответа.
# Если вам действительно нужен доступ к байтам по мере их возврата, используйте Response.raw.

