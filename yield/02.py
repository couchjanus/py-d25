# Итераторы в языке Python

# Основное назначение итератора – это упрощение навигации по элементам объекта, который, представляет собой некоторую коллекцию (список, словарь и т.п.). 
# Итератор представляет собой объект перечислитель, который для данного объекта выдает следующий элемент, либо бросает исключение, если элементов больше нет.

# Основное место использования итераторов – это цикл for. Если вы перебираете элементы в некотором списке или символы в строке с помощью цикла for, то это означает, что при каждой итерации цикла происходит обращение к итератору, содержащемуся в строке/списке, с требованием выдать следующий элемент, если элементов в объекте больше нет, то итератор генерирует исключение, обрабатываемое в рамках цикла for незаметно для пользователя.

# выведем элементы произвольного списка на экран.
num_list = [1, 2, 3, 4, 5]
for i in num_list:
    print(i)

# Mylist является итерируемым объектом. Когда вы создаёте список, используя генераторное выражение, вы создаёте также итератор:

mylist = [x*x for x in range(3)]
for i in mylist:
    print(i)

# Всё, к чему можно применить конструкцию «for… in...», является итерируемым объектом: списки, строки, файлы… Это удобно, потому что можно считывать из них значения сколько потребуется — однако все значения хранятся в памяти, а это не всегда желательно, если у вас много значений.
# для того, чтобы получить объект итератор необходимо использовать функцию iter(), а для извлечения следующего элемента из итератора – функцию next().

itr = iter(num_list)
print(next(itr))
print(next(itr))
print(next(itr))
print(next(itr))
print(next(itr))

# вызов функции next(itr) каждый раз возвращает следующий элемент из списка, а когда эти элементы заканчиваются, генерируется исключение StopIteration.
print(next(itr))
# Traceback (most recent call last):
#   File "<pyshell#12>", line 1, in <module>
#     print(next(itr))
# StopIteration
